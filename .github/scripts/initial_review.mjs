import { getInput, setFailed, info } from "@actions/core";
import { getOctokit } from "@actions/github";
import fetch from "node-fetch";

const token = process.env.GITHUB_TOKEN;
const fullRepo = process.env.GITHUB_REPOSITORY;
const [owner, repo] = fullRepo.split("/");

const client = getOctokit(token);

async function getOpenIssues() {
  const { data } = await client.rest.issues.listForRepo({
    owner,
    repo,
    state: "open",
    labels: "",
    per_page: 100,
  });
  return data.filter(i => !i.labels.some(l => l.name === "initial review done"));
}

async function fetchReadme(toOwner, toRepo) {
  const url = `https://raw.githubusercontent.com/${toOwner}/${toRepo}/main/README.md`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Failed to fetch README (${res.status})`);
  return await res.text();
}

function summarize(readme) {
  return readme.split("\n").slice(0, 10).join(" ").slice(0, 500);
}

async function run() {
  try {
    const issues = await getOpenIssues();

    for (const issue of issues) {
      const targetRepo = issue.title.replace(/^Check trending repo:\s*/, "");
      const [toOwner, toRepo] = targetRepo.split("/");

      let summary;
      try {
        const readme = await fetchReadme(toOwner, toRepo);
        summary = summarize(readme);
      } catch (e) {
        summary = `Could not fetch README: ${e.message}`;
      }

      const commentBody = `### 📝 Initial Review Summary

**Repository:** ${targetRepo}

**README summary (first ~10 lines):**

> ${summary.replace(/\n/g, "\n> ")}

*Auto‑generated by Action.*`;

      await client.rest.issues.createComment({
        owner, repo,
        issue_number: issue.number,
        body: commentBody,
      });

      await client.rest.issues.addLabels({
        owner, repo,
        issue_number: issue.number,
        labels: ["initial review done"],
      });
    }

    info(`Processed ${issues.length} issue(s).`);
  } catch (err) {
    setFailed(err.message);
  }
}

run();
